class SortAlgorithms {

    public static void bubbleSort(Order[] orders) {
        int n = orders.length;
        for (int i = 0; i < n - 1; i++) {
            boolean swapped = false; 
            for (int j = 0; j < n - 1 - i; j++) {
                if (orders[j].getTotalPrice() > orders[j + 1].getTotalPrice()) {
                    // Swap
                    Order temp = orders[j];
                    orders[j] = orders[j + 1];
                    orders[j + 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped) 
            	break;
        }
        }
        public static void quickSort(Order[] orders, int low, int high) {
            if (low < high) {
                int pi = partition(orders, low, high);
                quickSort(orders, low, pi - 1);
                quickSort(orders, pi + 1, high);
            }
        }

        private static int partition(Order[] orders, int low, int high) {
            double pivot = orders[high].getTotalPrice();
            int i = low - 1;

            for (int j = low; j < high; j++) {
                if (orders[j].getTotalPrice() < pivot) {
                    i++;
                 
                    Order temp = orders[i];
                    orders[i] = orders[j];
                    orders[j] = temp;
                }
            }

            
            Order temp = orders[i + 1];
            orders[i + 1] = orders[high];
            orders[high] = temp;

            return i + 1;
        }
    }
    class Order {
    private String orderId;
    private String customerName;
    private double totalPrice;

    public Order(String orderId, String customerName, double totalPrice) {
        this.orderId = orderId;
        this.customerName = customerName;
        this.totalPrice = totalPrice;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    public String toString() {
        return orderId + " - " + customerName + " - â‚¹" + totalPrice;
    }
}
public class SortingCustomers{
    public static void main(String[] args) {
        Order[] orders = {
            new Order("O001", "Alice", 2500.00),
            new Order("O002", "Bob", 1200.00),
            new Order("O003", "Charlie", 5000.00),
            new Order("O004", "David", 1800.00),
            new Order("O005", "Eva", 3000.00)
        };
        System.out.println("Before Bubble Sort:");
        for (Order o : orders) System.out.println(o);

        SortAlgorithms.bubbleSort(orders);
        System.out.println("\nAfter Bubble Sort (by price):");
        for (Order o : orders) System.out.println(o);
        Order[] quickOrders = {
            new Order("O001", "Alice", 2500.00),
            new Order("O002", "Bob", 1200.00),
            new Order("O003", "Charlie", 5000.00),
            new Order("O004", "David", 1800.00),
            new Order("O005", "Eva", 3000.00)
        };

        System.out.println("\nBefore Quick Sort:");
        for (Order o : quickOrders) System.out.println(o);

        SortAlgorithms.quickSort(quickOrders, 0, quickOrders.length - 1);
        System.out.println("\nAfter Quick Sort (by price):");
        for (Order o : quickOrders) System.out.println(o);
    }
}




